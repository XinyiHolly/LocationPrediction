package org.social.spatialcluster;

import java.awt.Point;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import org.social.postgresql.RelationalDBUtility;
import org.tweet.StPoint;
import org.tweet.TweetPoint;
import org.tweet.TweetRecord;
import org.tweet.TwitterUser;
import org.tweet.location.ClusteredLocation;

import dbscan.Utility;
import dbscan.dbscan;
import dbscan.VDbscan;

public class VDBSCANCluster {
	public ArrayList<ClusteredLocation> locations = new ArrayList<ClusteredLocation>();
	public ArrayList<TweetRecord> tweets;
	/*public ArrayList<TweetRecord> pointList = new ArrayList<TweetRecord>();*/
	public Vector<List> resultList = new Vector<List>();
	public ArrayList<TweetRecord> noiseList = new ArrayList<TweetRecord>();
	//public static Vector<List> resultList = new Vector<List>();
	public ArrayList<Integer> tweetsize = new ArrayList<Integer>();
	public int threshold;
	Vector<Double> epsList = new Vector<Double>();
	Vector<Double> etList = new Vector<Double>();
	
	public int k = 0;	
	
	public static void main(String[] args) {

		//String clusterName = "DBSCANCluster_20_4";
		String clusterName = "VDBSCANCluster";
		String[] name = clusterName.split("_");
		double eps = 0.0;
		
		long user_id = 560268128;
		int threshold = 4;
		
		String dbName = "madison";
		//String tableName = "madisontweets";
		String tableName = "mt_ultraselected";

		VDBSCANCluster rc = new VDBSCANCluster(user_id, dbName, tableName, threshold);		
		
		//RunClustering rc = new  RunClustering(clusterName, eps, minpt, threshold);		
	}
	
	public VDBSCANCluster (long user_id, String dbName, String tableName, int t)
	{
		threshold = t;
		ReadUserTweetPoints(user_id, dbName, tableName);
		GetClusters();
		//SplitListToSublist();
		GetClusteredLocations();
	}
	
	public void ReadUserTweetPoints(long user_id, String dbase, String tableName)
	{
		RelationalDBUtility db = new RelationalDBUtility(dbase);
		tweets = db.getTweetDataFromPostgresql( user_id, tableName);  /*Texas: 2163*/  /*DC: 26985 */ /*Madison:900913 32053?*/
		
		System.out.println("total tweet size: " + tweets.size() );
		
		// Added by Guiming @ 2016-07-05
		//WriteSelectedTweetsToCSV(tweets, "C:/Users/sheen/Box Sync/project/STDBSCAN/STDBSCANtweets.csv", true);
	}
	/*	public void GetClusters(int minpt)
	{		
		// parameters in VDBSCAN, will overwrite the default values in class VDbscan
		resultList.clear();	
		
		// apply DBSCAN	
		dbscan.pointList.clear();
		System.out.println("tweets size: " + tweets.size() + "," +   dbscan.pointList);
		for(int j = 0; j < tweets.size(); j++)
		{
			//dbscan.pointList.add(tweets.get(j));	
			VDbscan.pointList.add(tweets.get(j));                        
		}
		SetEps();
		//SetEt();
		try {
			
		 //* uncomment by QY 20180407, this perform multiple time dbscan using the last eps value
		  for (int i=0; i<epsList.size(); i++) {
				dbscan.e = epsList.get(i);
				dbscan.minpt = minpt;
				dbscan.applyVDbscan();	
			}
			
			dbscan.getNoiseList();
						
			VDbscan.applyVDbscan();			
			
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		int num = 0;
		for (int j = 0; j < dbscan.resultList.size(); j++)
		{
			List<TweetRecord> cluster = dbscan.resultList.get(j);
			if(cluster.size() < threshold) // used to control if a cluster is a representative cluster
				continue;
			resultList.add(cluster);				
			System.out.print("cluster " + num +  " [" + cluster.size() + "]\n");
			num ++;
		}				
				
		int clustersize = resultList.size();
		System.out.println("total cluster size : " + clustersize);
		for (int i = 0; i < dbscan.noiseList.size(); i++) 
		{
			TweetRecord noise = dbscan.noiseList.get(i);
			noiseList.add(noise);
		}
	}*/
	
	public void GetClusters()
	{		
		// reset point list and result list
		resultList.clear();	
		dbscan.pointList.clear();
		dbscan.resultList.clear();
		
		dbscan.pointList = (ArrayList<TweetRecord>)tweets.clone();
		dbscan.pointAmount = tweets.size();
		int size = Integer.MAX_VALUE;
		int rank = 1;
				  
		while (dbscan.pointList.size() >= threshold) // base case 1: limited rest points
		{	
			if (dbscan.pointList.size() < size) {
				rank = 1;
			}else {
				rank ++;
			}			
			double eps = GetEps(rank);	
			size = dbscan.pointList.size();
			
			// base case 2: use up possible k with no cluster found
			if ( eps < 0 )
				break;
			
			if ( eps < 20 )
				continue;
			
			try {
				/*if (k > threshold) {
					dbscan.minpt = k;
				} else if (k != 0)
					dbscan.minpt = threshold;*/
				if (k != 0)
					dbscan.minpt = k;
				else {
					System.out.println("Error!");
				}
				dbscan.e = eps;
				System.out.println("eps: " + eps);				
				// conduct DBSCAN using above eps and minpts value
				dbscan.applyVDbscan();
				// Reset point list
				ResetPoints();	
				
			} catch (NumberFormatException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		}
		
		dbscan.getNoiseList(tweets);
		
		int num = 1;
		for (int i = 0; i < dbscan.resultList.size(); i++)
		{
			List<TweetRecord> cluster = dbscan.resultList.get(i);	

			if(cluster.size() < threshold) // used to control if a cluster is a representative cluster
			{
				dbscan.noiseList.addAll(cluster);
				continue;
			}
			resultList.add(cluster);				
			System.out.print("cluster " + num +  " [" + cluster.size()  + ", " + threshold + " ]\n");
			
			for(TweetRecord t: cluster) {
				System.out.print ( t.getEps() +" " );
			}
			System.out.print("\n");
			num ++;
		}					
		int clustersize = resultList.size();
		System.out.println("total cluster size : " + clustersize);
		for (int i = 0; i < dbscan.noiseList.size(); i++) 
		{
			TweetRecord noise = dbscan.noiseList.get(i);
			noiseList.add(noise);
		}
	}
	
	private void ResetPoints()
	{		
		int cid = 1;
		for (int i=0; i<dbscan.resultList.size(); i++) {
			
			List<TweetRecord> cluster = dbscan.resultList.get(i);
			
			if (cluster.size() < threshold) {
				/*for (int j=0; j<cluster.size(); j++) {
					TweetRecord tweet = cluster.get(j);
					if(dbscan.pointList.contains(tweet)) {
						dbscan.pointList.remove(tweet);
					}
				}*/
				dbscan.resultList.remove(i);
				i--;
				continue;
			}
			
			System.out.println("cluster "+ cid + ": " + cluster.size());
			System.out.print("point k: ");
			
			for (int j=0; j<cluster.size(); j++) {
				TweetRecord tweet = cluster.get(j);
				System.out.print(tweet.getK() + ", ");
				if(dbscan.pointList.contains(tweet)) {
					dbscan.pointList.remove(tweet);
				}
			}
					
			cid ++;
			System.out.println("");
		}
	}
	
	public double GetEps(int rank)
	{
		ArrayList<TweetRecord> points = dbscan.pointList;
		//Vector<TweetRecord> temp = (Vector<TweetRecord>)points.clone();
		//get average distance from point(i) to other points
		double sumDistance = 0;
		System.out.println("total point size : " + points.size());

		for (int i = 0; i < points.size(); i++) {

			List<Double> distances = new ArrayList<Double>();

			for (int j = 0; j < points.size(); j++) {
				if (i == j)
					continue;

				double distance = Math.sqrt((points.get(i).getX() - points.get(j).getX()) * (points.get(i).getX() - points.get(j).getX())
						+ (points.get(i).getY() - points.get(j).getY()) * (points.get(i).getY() - points.get(j).getY()));

				if (distance > 1000) //300
					continue;

				/*if (distance < 0.1) // same points
					continue;*/
				distances.add(distance);
			}
			
			double curDistDifference = 0.0;
			double sumDistDifference = 0.0;
			double averageDistDifference = Double.MIN_VALUE;
			double averageDistance = 0;			

			int disSize = distances.size();

			if(disSize == 0){
				// noise? remove this points
				//System.out.println("it is here");
				//temp.remove(i);
				points.remove(i);
				i--;
				
			}else if(disSize == 1){

				averageDistance = distances.get(0);
				sumDistance += averageDistance;

			}else{
				//System.out.println("total distance size : " + distances.size());
				Collections.sort(distances);
				averageDistance = distances.get(0);
				double ptNum = 1;
				
				for(int k=1; k<distances.size(); k++){					
					
					curDistDifference =  distances.get(k) -  distances.get(k-1);

					sumDistDifference += curDistDifference;

					averageDistDifference = sumDistDifference/ptNum; 

					//System.out.println("DistDifference : " + distances.get(k) + "," +  distances.get(k-1) + "," + curDistDifference + "," + averageDistDifference );	

					if ((k >= distances.size()*0.75) && (Math.abs(curDistDifference) > 4 * averageDistDifference) && (averageDistDifference) > 1.0) {

						//System.out.println(Double.toString(curDistDifference) + " " + Double.toString(averageDistDifference)) ;
						break;
						
					}else{
						averageDistance += distances.get(k);
						ptNum++;
					}
				}				
				//ptNum = distances.size();
				averageDistance = averageDistance / ptNum;
				sumDistance += averageDistance;				
			}
		}	

		double avgd = sumDistance / points.size();
		System.out.println("final average distance : " + avgd);
		List<Integer> kArray = new ArrayList<Integer>();
		List<Integer> kArray_temp = new ArrayList<Integer>();
		
		for (int i = 0; i < points.size(); i++) {
			int k = 0;
			double eps = Double.MIN_VALUE;
			for (int j = 0; j < points.size(); j++) {
				if (i == j)
					continue;
				double radius = Math.sqrt((points.get(i).getX() - points.get(j).getX()) * (points.get(i).getX() - points.get(j).getX())
						+ (points.get(i).getY() - points.get(j).getY()) * (points.get(i).getY() - points.get(j).getY()));
				if (radius < avgd) {
					k++;
					if (radius > eps)
						eps = radius;
				}
			}
			k = k - 1; 
			points.get(i).setK(k);
			if(k>0){			
				kArray.add(k);
			}
			else /*if(k<0)*/{	
				/*points.remove(i);
				i--;*/
				kArray_temp.add(k);
			}			
		}

		// find mode of k values and calculate eps
		System.out.println(kArray.toString());
		k = VDbscan.getMode(kArray, rank);
		System.out.println("predicted K: " + k);
		System.out.println("K <= 0: " + kArray_temp.size());
		// use up possible k with no cluster found 
		if (k == -2) {
			return -1;
		}		

		for(int i = 0; i < points.size(); i++) {
			List<Double> distances = new ArrayList<Double>();
			for (int j = 0; j < points.size(); j++) {
				if (i == j)
					continue;
				double radius = Math.sqrt((points.get(i).getX() - points.get(j).getX()) * (points.get(i).getX() - points.get(j).getX())
						      + (points.get(i).getY() - points.get(j).getY()) * (points.get(i).getY() - points.get(j).getY()));
				/*if (radius < avgd) {
					distances.add(radius);
				}*/
				distances.add(radius);
			}
			Collections.sort(distances, new SortbyKDistance());

			/*if (distances.size() == 0)
				continue;*/
			if (distances.size() < (k + 1))
				points.get(i).setEps(distances.get(distances.size() - 1));
			else 
				points.get(i).setEps(distances.get(k));
		}
				
		// sort by kst distance
		Collections.sort(points, new SortbyVEpsDistance());		

		// find eps
		double eps = 0.0;
		int start = 0;
		int end = 0;
		boolean isFlat = true;
		double curDifference = 0.0;
		double averageDifference = Double.MIN_VALUE;
		double sumDifference = 0.0;
		double y_0 = points.get(0).getEps();
		double x_0 = 1.0;
 		double y_n = points.get(points.size()-1).getEps();
		double x_n = (double)points.size();

		for (int i = 0; i < points.size() - 1; i++) {
			if (points.get(end).getEps() > 1000 || i == points.size() - 2) {
				y_n = points.get(i).getEps();
				x_n = (double)(i+1);
				double deta_x = x_n - x_0;
		 		double deta_y = y_n - y_0;
		 		double A = deta_y/deta_x;
		 		double B = -1.0;
		 		double C = y_0 - deta_y/deta_x;
		 		double maxDistance = 0.0;   
		 		int knee = (int)x_0 + 1;
		 		for (int j = start; j <= i; j++) {			
		 			double y = points.get(j).getEps();
		 			double x = (double)(j+1);
		 			double distance = Math.abs(A*x+B*y+C)/Math.sqrt(A*A+B*B);
		 			if (distance > maxDistance) {
		 				maxDistance = distance;
		 				knee = j;
		 			}
		 		}   
		 		eps = points.get(knee).getEps();
		 		/*double eps1 = points.get(knee).getEps();
		 		double eps2 = points.get(knee+1).getEps();
				eps = eps1/2 + eps2/2;*/
				break;
			}
			curDifference = points.get(i + 1).getEps() - points.get(i).getEps();
			sumDifference += curDifference;
			if (i == 0){
				averageDifference = Math.abs(curDifference);
			}else{
				averageDifference = sumDifference/(i+1);
			}
			//System.out.println("current different, average "  + Double.toString(curDifference) + " " + Double.toString(averageDifference)) ;
			if (isFlat == false && Math.abs(curDifference) < averageDifference) {
				isFlat = true;
				//System.out.println("current different, average " + Double.toString(curDifference) + " " + Double.toString(averageDifference)) ;
				y_n = points.get(i).getEps();
				x_n = (double)(i+1);
				double deta_x = x_n - x_0;
		 		double deta_y = y_n - y_0;
		 		double A = deta_y/deta_x;
		 		double B = -1.0;
		 		double C = y_0 - deta_y/deta_x;
		 		double maxDistance = 0.0;   
		 		int knee = (int)x_0 + 1;
		 		for (int j = start; j <= i; j++) {			
		 			double y = points.get(j).getEps();
		 			double x = (double)(j+1);
		 			double distance = Math.abs(A*x+B*y+C)/Math.sqrt(A*A+B*B);
		 			if (distance > maxDistance) {
		 				maxDistance = distance;
		 				knee = j;
		 			}
		 		}   
		 		eps = points.get(knee).getEps();
		 		/*double eps1 = points.get(knee).getEps();
		 		double eps2 = points.get(knee+1).getEps();
				eps = eps1/2 + eps2/2;*/
				break;
				
			} else {
				if (Math.abs(curDifference) > 4 * averageDifference && averageDifference > 0.0) {
					isFlat = false;
				} else if (Math.abs(curDifference) > averageDifference){
					averageDifference = Math.abs(curDifference);
				}
			}					
			end++;
		}
		return eps;
	}
	
	public void SetEps(int rank)
	{
		Vector<TweetRecord> points = (Vector<TweetRecord>)VDbscan.pointList;
		
		//get average distance from point(i) to other points
		double sumDistance = 0;
		System.out.println("total point size : " + points.size());

		for (int i = 0; i < points.size(); i++) {

			List<Double> distances = new ArrayList<Double>();

			for (int j = 0; j < points.size(); j++) {
				if (i == j)
					continue;
				//System.out.println("distance: " +  distance);

				double distance = Math.sqrt((points.get(i).getX() - points.get(j).getX()) * (points.get(i).getX() - points.get(j).getX())
						+ (points.get(i).getY() - points.get(j).getY()) * (points.get(i).getY() - points.get(j).getY()));

				if (distance > 1000) //300
					continue;

				if (distance < 0.1) // same points
					continue;
				distances.add(distance);
			}
			
			double curDistDifference = 0.0;
			double previousDistDifference, sumDistDifference = 0.0;
			double averageDistDifference = Double.MIN_VALUE;
			double averageDistance = 0;
			double ptNum = 1;

			int disSize = distances.size();

			if(disSize == 0){
				// noise? remove this points
				//System.out.println("it is here");
				points.remove(i);
			}else if(disSize == 1){
				//System.out.println("With only one point : " + distances.get(0) );
			
				points.get(i).setEps(distances.get(0));
				sumDistance += averageDistance;

			}else{
				//System.out.println("total distance size : " + distances.size());

				Collections.sort(distances);
				averageDistance = distances.get(0);
				for(int k=1; k<distances.size(); k++){

					curDistDifference =  distances.get(k) -  distances.get(k-1);

					sumDistDifference += curDistDifference;

					averageDistDifference = sumDistDifference/ptNum; 

					//System.out.println("DistDifference : " + distances.get(k) + "," +  distances.get(k-1) + "," + curDistDifference + "," + averageDistDifference );	

					if ((Math.abs(curDistDifference) > 30 || Math.abs(curDistDifference) > 3 * averageDistDifference && averageDistDifference > 1.0) ) {

						//System.out.println(Double.toString(curDistDifference) + " " + Double.toString(averageDistDifference)) ;

						break;
					}else{
						averageDistance += distances.get(k);
						ptNum++;
					}
				}

				averageDistance = averageDistance / ptNum;
				//System.out.println("averagerge distance: " +  averageDistance);
				//points.get(i).setEps(averageDistance);
				sumDistance += averageDistance;				
			}
		}

		double avgd = sumDistance / points.size();
		System.out.println("final average distance : " + avgd);
		List<Integer> kArray = new ArrayList<Integer>();
		for (int i = 0; i < points.size(); i++) {
			int k = 0;
			double eps = Double.MIN_VALUE;
			for (int j = 0; j < points.size(); j++) {
				if (i == j)
					continue;
				double radius = Math.sqrt((points.get(i).getX() - points.get(j).getX()) * (points.get(i).getX() - points.get(j).getX())
						+ (points.get(i).getY() - points.get(j).getY()) * (points.get(i).getY() - points.get(j).getY()));
				if (radius < avgd) {
					k++;
					if (radius > eps)
						eps = radius;
				}
			}
			k = k - 1;  
			/*if(k>1){ // why > 1???
				kArray.add(k);
			}*/
			if(k>0){
				kArray.add(k);
			}
		
			points.get(i).setK(k);
			//points.get(i).setEps(0);
			//System.out.println(eps);
		}

		// find mode of k values and calculate eps
		System.out.println(kArray.toString());
		k = VDbscan.getMode(kArray, rank);
		
		System.out.println("predicted K: " + k);
		//int k_ = 35/*(int)Math.log10(points.size())*/;
		//VDbscan.minpt = k-20;
		System.out.println("selected K : " + k);
		for(int i = 0; i < points.size(); i++) {
			List<Double> distances = new ArrayList<Double>();
			for (int j = 0; j < points.size(); j++) {
				if (i == j)
					continue;
				double radius = Math.sqrt((points.get(i).getX() - points.get(j).getX()) * (points.get(i).getX() - points.get(j).getX())
						+ (points.get(i).getY() - points.get(j).getY()) * (points.get(i).getY() - points.get(j).getY()));
				/*if (radius < avgd) {
					distances.add(radius);
				}*/
				
				distances.add(radius);
			}
			Collections.sort(distances, new SortbyKDistance());
			//System.out.println(distances.get(k));
			if (distances.size() == 0)
				continue;
			if (distances.size() < (k + 1))
				points.get(i).setEps(distances.get(distances.size() - 1));
			else 
				points.get(i).setEps(distances.get(k));
		}
				
		// sort by kst distance
		Collections.sort(points, new SortbyVEpsDistance());
		/*for (int i = 0; i < points.size(); i++) {
			System.out.println("eps : " + points.get(i).getEps());
		}*/
		//WriteEpsToCSV(points, "C:/2017Fall/VEps.csv");		

		// find eps[i] and assign them to points
		
		int start = 0;
		int end = 0;
		boolean isFlat = true;
		double curDifference = 0.0;
		double averageDifference = Double.MIN_VALUE;
		double sumDifference = 0.0;
		double y_0 = points.get(0).getEps();
		double x_0 = 1.0;
 		double y_n = points.get(points.size()-1).getEps();
		double x_n = (double)points.size();

		for (int i = 0; i < points.size() - 1; i++) {
			if (start != 0 && (points.get(end).getEps() > 1000 || i == points.size() - 2)) {
				double eps = points.get(start-1).getEps();
				for(; start < points.size(); start++) {
					points.get(start).setEps(eps);
				}
				break;
			}
			curDifference = points.get(i + 1).getEps() - points.get(i).getEps();
			sumDifference += curDifference;
			if (i == 0){
				averageDifference = Math.abs(curDifference);
			}else{
				averageDifference = sumDifference/i;
			}
			//System.out.println("current different, average "  + Double.toString(curDifference) + " " + Double.toString(averageDifference)) ;
			if (isFlat == false && Math.abs(curDifference) < averageDifference) {
				isFlat = true;
				//System.out.println("current different, average " + Double.toString(curDifference) + " " + Double.toString(averageDifference)) ;
				y_n = points.get(i).getEps();
				x_n = (double)(i+1);
				double deta_x = x_n - x_0;
		 		double deta_y = y_n - y_0;
		 		double A = deta_y/deta_x;
		 		double B = -1.0;
		 		double C = y_0 - deta_y/deta_x;
		 		double maxDistance = 0.0;   
		 		int knee = (int)x_0 + 1;
		 		for (int j = start; j <= i; j++) {			
		 			double y = points.get(j).getEps();
		 			double x = (double)(j+1);
		 			double distance = Math.abs(A*x+B*y+C)/Math.sqrt(A*A+B*B);
		 			if (distance > maxDistance) {
		 				maxDistance = distance;
		 				knee = j;
		 			}
		 		}   		
				double eps = points.get(knee).getEps();				
			/*	if (eps > 200) {
					eps = points.get(start-1).getEps();
					for (; start < points.size(); start++) {
						points.get(start).setEps(eps);
					}
					break;
				}*/
				//System.out.println("eps: " + eps);
				epsList.add(eps);
				for (; start < end; start++) {
					points.get(start).setEps(eps);
				}
				y_0 = points.get(i).getEps();
				x_0 = (double)(i+1);
				//start++;
				averageDifference = Double.MIN_VALUE;
				curDifference = 0.0;
			} else {
				if (Math.abs(curDifference) > 4 * averageDifference && averageDifference > 0.0) {
					isFlat = false;
				} else if (Math.abs(curDifference) > averageDifference){
					averageDifference = Math.abs(curDifference);
				}
			}					
			end++;
		}
	}

	public TweetPoint GetGeoCoordinate(List<TweetRecord> points, double x, double y)
	{
		TweetPoint pt = new TweetPoint();
		for(int i = 0; i < points.size(); i++)
		{
			if(Math.abs(x - points.get(i).x) < 1 && Math.abs(y - points.get(i).y) < 1)
			{
				pt.latitude = points.get(i).getLatitude();
				pt.longitude = points.get(i).getLongitude();
			}
		}
		return pt;
	}

	private static boolean rightTurn(Point a, Point b, Point c)
	{
		return (b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x) > 0;
	}

	public class XCompare implements Comparator<Point>
	{
		@Override
		public int compare(Point o1, Point o2) 
		{
			return (new Integer(o1.x)).compareTo(new Integer(o2.x));
		}
	}

	public static String query  = null;
	@SuppressWarnings("deprecation")

	public void SplitListToSublist()
	{	
		// Define a list to accommodate clusters in different areas
		/*List<Vector<int[]>> childList = new ArrayList<Vector<int[]>>();
		Vector<int[]> tempList = new Vector<int[]>();*/
		List<Vector<Integer>> childList = new ArrayList<Vector<Integer>>();
		Vector<Integer> tempList = new Vector<Integer>();
        //int[] tempList = new int[2];
        //double x0 = ((TweetRecord)resultList.get(0).get(0)).getX();
        //double y0 = ((TweetRecord)resultList.get(0).get(0)).getY();
        double x0, y0;
        if (resultList != null) {
        	// eliminate the redundant clusters
        	for (int i=0; i<resultList.size(); i++) {
        		boolean flag = false;
        		TweetRecord tweet = (TweetRecord)resultList.get(i).get(0);
    			double x = tweet.getX();
                double y = tweet.getY();
                for (int j=0; j<childList.size(); j++) {
                	tempList = childList.get(j);
                	/*int timeLayer = tempList.get(0)[0];
                	int listIndex = tempList.get(0)[1];*/
                	int timeLayer = tempList.get(0);
                	//int listIndex = tempList.get(0)[1];
                	/*x0 = ((TweetRecord)resultList.get(timeLayer).get(listIndex).get(0)).getX();
            		y0 = ((TweetRecord)resultList.get(timeLayer).get(listIndex).get(0)).getY();*/
                	x0 = ((TweetRecord)resultList.get(timeLayer).get(0)).getX();
            		y0 = ((TweetRecord)resultList.get(timeLayer).get(0)).getY();
            		double distance = (x-x0)*(x-x0)+(y-y0)*(y-y0);
            		if (distance < 9E10) {
            			tempList.add(i);
                        flag = true;
                        break;
                    } 
                }
                if (!flag)
            	{
                    tempList = new Vector<Integer>();
                    int[] indexPair = new int[2];
                    tempList.add(i);
                    childList.add(tempList);
            	}   
        	}
        }
        
        Comparator<Vector<Integer>> comparator = new Comparator<Vector<Integer>>()
		{
	        @Override
	        public int compare(Vector<Integer> l1, Vector<Integer> l2) {	        	
		        return (int) (l2.size() - l1.size());
	        }
		};
		Collections.sort(childList, comparator);
		
		//Map<Integer, Vector<List>> resultCopy = new HashMap<Integer, Vector<List>>(resultList);
		Vector<List> resultCopy = (Vector<List>)resultList.clone(); 
		resultList.clear();
		tempList = (Vector<Integer>)childList.get(0).clone();
		for (int i=0; i<tempList.size(); i++)
		{
			int timeLayer = tempList.get(i);
			resultList.add(resultCopy.get(timeLayer));
		}				
    }
		
	public void GetClusteredLocations() {
		
		ArrayList<TweetRecord> postTweets = new ArrayList<TweetRecord>();
		int index = 1;
		
		double sumPer = 0.0;
	
		for (int i=0; i<resultList.size(); i++) {
			List<TweetRecord> cluster = resultList.get(i);
			int clusterSize = cluster.size();					

		    ClusteredLocation location = new ClusteredLocation(index);		    			    
			location.SetSize(cluster.size());
			/*location.SetPercentage(percentage);
			sumPer += percentage;*/
			location.setTweetRecords(cluster);			
			/*location.SetTimeRange(timestamps.get(2*clusterIndex), timestamps.get(2*clusterIndex+1));*/
			double sumLat, sumLon, sumX, sumY;
			sumLat = sumLon = sumX = sumY = 0;
			
			double aveEps = 0.0, sumEps = 0.0, aveEt = 0.0, sumEt = 0.0;
			
			List<Double> epsArray = new ArrayList<Double>();
			
			int centerIndex = 0, mostSum = 0;
			
			double minimum_sum_dist =Double.MAX_VALUE;
	
			
			for (int j = 0; j < cluster.size(); j++) {
				TweetRecord record = (TweetRecord) cluster.get(j);
				sumEps += record.getEps();
				//System.out.println("cluster" + i + ": " + record.getEps());					
				sumEt += record.getEt();
				
				epsArray.add(record.getEps());
				//System.out.println("cluster" + i + ": " + record.getEt());
							
				record.setPlace(index);
				//postTweets.add(record);		
				
				double sum_dis =0.0;
				
				for (int k=0; k < cluster.size(); k++) {
					TweetRecord q = cluster.get(k);
					
					sum_dis += Utility.getDistance(record,q);
				}
				
				if (minimum_sum_dist > sum_dis) {
					minimum_sum_dist = sum_dis;
					centerIndex = j;
				}	
				
				sumLat += record.getLatitude();
				sumLon += record.getLongitude();
				sumX += record.x;
				sumY += record.y;
				
			}			
			double eps = VDbscan.getDoubleArrayMode(epsArray);
			int k = cluster.get(0).getK();
			
			location.SetEPS(eps);
			location.SetK(k);
			aveEps = sumEps/cluster.size();
			aveEt = sumEt/cluster.size();
			
			/****************************Geometric mean**************************************/				
			double mean_centroidLat = sumLat / location.GetSize();
			double mean_centroidLon = sumLon / location.GetSize();
			double mean_centroidx = sumX / location.GetSize();
			double mean_centroidy = sumY / location.GetSize();
			
			location.SetMeanLatLon(mean_centroidLat, mean_centroidLon);
			
			
			/***************************Geometric median*************************************/
			TweetRecord centroid = (TweetRecord) cluster.get(centerIndex);
			double centroidLat = centroid.latitude;
			double centroidLon = centroid.longitude;
			double centroidx = centroid.getX();
			double centroidy = centroid.getY();
/***************************Geometric median*************************************/
			
			
			location.SetLatLon(centroidLat, centroidLon);	
			location.SetRepId(centroid.tweetId);
			location.SetXY(centroidx, centroidy);	
			
			//Uncomment by Qunying to avoid to calculate centroid.
		/*	
			for (int j = 0; j < cluster.size(); j++) {
				TweetRecord record = (TweetRecord) cluster.get(j);
				int neighborSum = 0;
				Iterator<TweetRecord> points = cluster.iterator();
				while(points.hasNext())
				{						
					TweetRecord q = points.next();
					if(Utility.getDistance(record,q)<=eps)
					{
						neighborSum += 1;
					}
				}
				if (neighborSum > mostSum) {
					mostSum = neighborSum;
					centerIndex = j;
				}		
			}
			
			TweetRecord centroid = (TweetRecord) cluster.get(centerIndex);
			double centroidLat = centroid.latitude;
			double centroidLon = centroid.longitude;
			double centroidx = centroid.getX();
			double centroidy = centroid.getY();
			location.SetLatLon(centroidLat, centroidLon);		
			location.SetXY(centroidx, centroidy);	
			
			*
			*/		
			
			
			//location.SetRepId(centroid.tweetId); // repetitive
		
			//location.SetStartTime(centroid.getMinuteTime());
						
			/*location.GetConvexGeometry();*/
			locations.add(location);
			index++; 			
		}
		double averagePer = sumPer/locations.size();
		System.out.println(averagePer);
		
		//Collections.sort(locations, comparator);
	}
	
	Comparator<ClusteredLocation> comparator = new Comparator<ClusteredLocation>()
	{
        @Override
        public int compare(ClusteredLocation l1, ClusteredLocation l2) {	        	
	        return (int) (l1.startTime - l2.startTime);
        }
	};
	
	/*write Eps values to csv*/
    private static void WriteEpsToCSV(Vector<TweetRecord> points, String Filename){
	    try {
	        FileWriter writer = new FileWriter(Filename);
		 
	        for(int i = 0; i < points.size(); i++){
			
	        	TweetRecord point = points.get(i);
	    	
	    	    if(point.getEps() > -0.000001){
			        writer.append(Double.toString(point.getEps()));
			        writer.append('\n');
	    	    }
	    	    else{System.out.println("error");}
		    
	        }				
	        //generate whatever data you want
			
	        writer.flush();
	        writer.close();
	    }
		catch(IOException e)
		{
			e.printStackTrace();
		} 
    } 
    
    /*write Et values to csv*/
    private static void WriteEtToCSV(Vector<TweetRecord> points, String Filename, Boolean latlon){
	    try {
	        FileWriter writer = new FileWriter(Filename);
		 
	        for(int i = 0; i < points.size(); i++){
			
	        	TweetRecord point = points.get(i);
	    	
	    	    if(point.getEt() > 0){
			        writer.append(Double.toString(point.getEt()));
			        writer.append('\n');
	    	    }
		    
	        }				
	        //generate whatever data you want
			
	        writer.flush();
	        writer.close();
	    }
		catch(IOException e)
		{
			e.printStackTrace();
		} 
    } 
	
    private static void WriteSelectedTweetsToCSV(ArrayList<TweetRecord> tweets, String Filename, Boolean latlon){
	    try
		    {
		        FileWriter writer = new FileWriter(Filename);
			 
		        for(int i = 0; i < tweets.size(); i++){
				
		    	    TweetRecord tweet = tweets.get(i);
		    	
		    	    if(latlon){
				        writer.append(Double.toString(tweet.longitude));
				        writer.append(',');
				        writer.append(Double.toString(tweet.latitude));
				        writer.append(',');
			    }
		    	
			    writer.append(Double.toString(tweet.x));
			    writer.append(',');
			    writer.append(Double.toString(tweet.y));
			    writer.append(',');
			    //writer.append(Double.toString(tweet.getHourTime()));
			    writer.append(Double.toString(tweet.getMinuteTime()));
			    writer.append('\n');
		    }				
		    //generate whatever data you want
				
		    writer.flush();
		    writer.close();
		}
		catch(IOException e)
		{
		    e.printStackTrace();
		} 
    } 
 
    //Added by Guiming @ 2016-07-05
    /*write tweets to csv*/
    private static void WriteClusteredTweetsToCSV(List<StPoint> stPoints, String Filename, Boolean latlon){
	    try
		{
		    FileWriter writer = new FileWriter(Filename);
			 
		    for(int i = 0; i < stPoints.size(); i++){
		    			
		    	StPoint pnt = stPoints.get(i);
		    	
		    	if(latlon){
				    writer.append(Double.toString(pnt.GetLon()));
				    writer.append(',');
				    writer.append(Double.toString(pnt.GetLat()));
				    writer.append(',');
			    }
		    	
			    writer.append(Double.toString(pnt.GetX()));
			    writer.append(',');
			    writer.append(Double.toString(pnt.GetY()));
			    writer.append(',');
			    writer.append(Double.toString(pnt.GetT()));
			    
			    if(pnt.GetClusterID() != -1){
				    writer.append(',');
				    writer.append(Integer.toString(pnt.GetClusterID()));
			    }			    
			    writer.append('\n');
		    }				
		    //generate whatever data you want
				
		    writer.flush();
		    writer.close();
		}
		catch(IOException e)
		{
		     e.printStackTrace();
		} 
    }     	
}
