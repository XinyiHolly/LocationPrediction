package dbscan;


import java.io.IOException;
import java.util.*;

import org.social.spatialcluster.HotSpot;
import org.tweet.TweetRecord;


public class dbscan
{
	public static double e = 20.0;
	public static int minpt = 4;
	public static int pointAmount = 0;

	public static Vector<List> resultList = new Vector<List>();

	public static ArrayList<TweetRecord> pointList = Utility.getList();

	public static ArrayList<TweetRecord> noiseList = new ArrayList<TweetRecord>();
	
	public static Vector<TweetRecord> Neighbours;

	public static int getMaxiClusterIndex(){

		int clusterSize = resultList.size();
		int maxIndex = 0;
		int maxptSize = 0;
		for(int i = 0; i <resultList.size(); i++)
		{
			List<TweetRecord> clusterList = dbscan.resultList.get(i);

			int ptSize = clusterList.size();

			if(maxptSize < ptSize){
				maxptSize = ptSize;
				maxIndex = i;
			}
		}	
		return maxIndex;
	}
	
	public static ArrayList<TweetRecord> getNoiseList(ArrayList<TweetRecord> tweets){
		
		noiseList.clear();
		
		int totalPoints = tweets.size();
		System.out.println(totalPoints);
		
		for(int i = 0; i < totalPoints; i++)
		{
			TweetRecord m = tweets.get(i);
			boolean bFound = false;
			for(int j = 0; j < dbscan.resultList.size(); j++)
			{
				List<TweetRecord> clusterList = dbscan.resultList.get(j);
				for(int k = 0; k < clusterList.size(); k++)
				{
					TweetRecord n = clusterList.get(k);
					if(Utility.equalPoints(m, n))
					{
						bFound = true;
						break;
					}
				}
				if(bFound)
					break;
			}			
			if(!bFound)
				noiseList.add(m);
		}				
		return noiseList;	
	}
	
	public static Vector<List> applyDbscan() throws NumberFormatException, IOException
	{
		resultList.clear();

		Utility.VisitList.clear();

		int index = 0;

		while(pointList.size()>index)
		{
			TweetRecord p = pointList.get(index);

			if(!Utility.isVisited(p))
			{
				Utility.Visited(p);

				Neighbours = Utility.getNeighbors(p);
				if (Neighbours.size() >= minpt)
				{
					int ind = 0;
					while(Neighbours.size()>ind)
					{
						TweetRecord r = Neighbours.get(ind);
						if(!Utility.isVisited(r))
						{
							Utility.Visited(r);
							Vector<TweetRecord> Neighbours2 = Utility.getNeighbors(r);
							if (Neighbours2.size() >= minpt)
							{
								Neighbours = Utility.Merge(Neighbours, Neighbours2);
							}
						} 
						ind++;
					}
					resultList.add(Neighbours);
				}
			}
			index++;
		}
		return resultList;
	}
	
	public static Vector<List> applyVDbscan() throws NumberFormatException, IOException
	{
		//resultList.clear();

		Utility.VisitList.clear();

		int index = 0;

		while(pointList.size()>index)
		{
			TweetRecord p = pointList.get(index);

			if(!Utility.isVisited(p))
			{
				Utility.Visited(p);

				Neighbours = Utility.getNeighbors(p);
				if (Neighbours.size() >= minpt)
				{
					int ind = 0;
					while(Neighbours.size()>ind)
					{
						TweetRecord r = Neighbours.get(ind);
						if(!Utility.isVisited(r))
						{
							Utility.Visited(r);
							Vector<TweetRecord> Neighbours2 = Utility.getNeighbors(r);
							if (Neighbours2.size() >= minpt)
							{
								Neighbours = Utility.Merge(Neighbours, Neighbours2);
							}
						} 
						ind++;
					}
					SetKEps();
					resultList.add(Neighbours);
				}
			}
			index++;
		}
		return resultList;
	}
	
	private static void SetKEps() {
		for (int i=0; i<Neighbours.size(); i++) {
			//Neighbours.get(i).setK(minpt);
			Neighbours.get(i).setEps(e);
		}
	}

	public static void main(String args[]) throws NumberFormatException, IOException {

		//dbscan.pointList = Utility.getListFromDatabase();

		dbscan.applyDbscan();

		System.out.println(dbscan.resultList.size());

		for(int i = 0; i < dbscan.resultList.size(); i++)
		{
			List l = dbscan.resultList.get(i);

			if(l.size() < 10)
				continue;
		}

	}

}









