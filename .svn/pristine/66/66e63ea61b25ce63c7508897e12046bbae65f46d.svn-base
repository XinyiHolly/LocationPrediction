package dbscan;

import java.util.Iterator;
import java.util.Vector;



import org.tweet.TweetRecord;
import org.tweet.TweetRecord;


public class VUtility
{
	
	public static Vector<TweetRecord> VisitList = new Vector<TweetRecord>();
	
	public static double getDistance (TweetRecord p, TweetRecord q)
	{
		double dx = p.getX() - q.getX();
		double dy = p.getY() - q.getY();
		double distance = Math.sqrt (dx * dx + dy * dy);
		return distance;
	}
	
	public static double getTimeDistance(TweetRecord p, TweetRecord q)
	{
		// time difference in minutes
		return Math.abs(p.getMinuteTime() - q.getMinuteTime());
	}
	
	public static Vector<TweetRecord> getStNeighbors(TweetRecord p)
	{
		Vector<TweetRecord> neigh = new Vector<TweetRecord>();
		Iterator<TweetRecord> points = stVDbscan.pointList.iterator();
		while(points.hasNext())
		{
			TweetRecord q = points.next();
			if(getDistance(p,q) <= p.getEps() && getTimeDistance(p, q) <= p.getEt())
			{
				neigh.add(q);
			}
		}
		return neigh;		
	}
	
	public static Vector<TweetRecord> getNeighbours(TweetRecord p)
	{
		Vector<TweetRecord> neigh = new Vector<TweetRecord>();
		Iterator<TweetRecord> points = VDbscan.pointList.iterator();
		while(points.hasNext())
		{
			TweetRecord q = points.next();
			if(getDistance(p,q) <= p.getEps())
			{
				neigh.add(q);
			}
		}
		return neigh;
	}

	public static void Visited(TweetRecord d){
		VisitList.add(d);
	}

	public static boolean isVisited(TweetRecord c)
	{
		if(VisitList.contains(c))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public static Vector<TweetRecord> Merge(Vector<TweetRecord> a,Vector<TweetRecord> b)
	{
	
		Iterator<TweetRecord> it5 = b.iterator();
		while(it5.hasNext())
		{
			TweetRecord t = it5.next();
			if (!a.contains(t) )
			{
				a.add(t);
			}
		}
		return a;
	}

	public static Vector<TweetRecord> getList() {
	
		Vector<TweetRecord> newList = new Vector<TweetRecord>();
		newList.clear();
		return newList;
	}


	public static Boolean equalPoints(TweetRecord m , TweetRecord n) 
	{
		if((m.getX()==n.getX())&&(m.getY()==n.getY()))
			return true;
		else
			return false;
	}	

}







